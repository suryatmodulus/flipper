<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Flipper Blog</title>
        <link>https://fbflipper.com/blog</link>
        <description>Flipper Blog</description>
        <lastBuildDate>Fri, 20 May 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Headless Flipper - what it means for plugin developers]]></title>
            <link>https://fbflipper.com/blog/2022/05/20/preparing-for-headless-flipper</link>
            <guid>Headless Flipper - what it means for plugin developers</guid>
            <pubDate>Fri, 20 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Flipper is moving from an Electron monolith to a headless Node.js app with a web UI. It reshapes how we think about plugins and what plugins can do. We talk about what changes and how to prepare our plugins for the migration.]]></description>
            <content:encoded><![CDATA[<p><img src="/img/preparing-for-headless-flipper.jpg" alt="Cover image"/></p><p>We know Flipper as an Electron desktop app that serves mobile developers as
their debugging companion. Thousands of people use Flipper every day to tinker
with their app and get to the bottom of tricky problems.</p><p>As announced in the previous
<a href="https://fbflipper.com/blog/2021/10/14/roadmap/">roadmap post</a>, we are committed
to amplifying how Flipper could improve the quality of our software. We want
take Flipper beyond its current role as a complementary debugging tool, provide
a powerful API, and allow using Flipper in more than just the GUI context (we
call it &quot;headless mode&quot;). Imagine talking to your mobile device (or anything
else that runs Flipper Client) from your terminal. Imagine deploying Flipper
remotely in the cloud and interacting with it from your laptop. Imagine using
your favorite plugins for automated testing.</p><p>In this post we cover:</p><ul><li>How Flipper changes to facilitate the headless mode</li><li>How it affects plugins</li><li>A migration guide</li></ul><h2>How Flipper changes</h2><p>Let us take a look at how it works today as an Electron app.</p><p><img src="/img/flipper-arch-electron.jpg" alt="Flipper Electron architecture"/></p><p>Here is what happens:</p><ol><li>Flipper starts as an Electron application.<ol><li>WebSocket server starts.</li><li>Device discovery starts via adb/idb/metro.</li><li>Electron shows a web view with Flipper UI (React).</li><li>Flipper UI queries the device discovery service for a list of devices.</li></ol></li><li>At this point, Flipper can already run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-device-plugin">&quot;device&quot; plugins</a>.
These plugins do not receive a connection to a running app. They talk to the
device via adb/idb/metro.</li><li>An app starts on the device.</li><li>Flipper Client embedded in the app connects to the WebSocket server.</li><li>Flipper updates the list of known clients and reflects it in the UI.</li><li>Now Flipper can run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-client-plugin">&quot;client&quot; plugins</a>.</li><li>Client plugins talk to the device application over the WebSocket connection.</li></ol><blockquote><p>You can start Flipper Electron with <code>yarn start</code> from the <code>/desktop</code> folder.</p></blockquote><p>Here is how Flipper Headless works.</p><p><img src="/img/flipper-arch-headless.jpg" alt="Flipper Headless architecture"/></p><ol><li>Flipper starts as a Node.js application.<ol><li>WebSocket server starts.</li><li>Device discovery starts via adb/idb/metro.</li><li>Web server starts.</li><li>It serves Flipper UI to a browser.</li><li>Flipper UI connects to the WebSocket server.</li><li>Flipper UI sends a message over the WebSocket connection to query the
device discovery service for a list of devices.</li></ol></li><li>At this point, Flipper can already run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-device-plugin">&quot;device&quot; plugins</a>.
These plugins do not receive a connection to a running app. They talk to the
device via adb/idb/metro.</li><li>An app starts on the device.</li><li>Flipper Client embedded in the app connects to the WebSocket server.</li><li>Flipper updates the list of known clients. It sends a message over the
WebSocket connection to Flipper UI with the information about the new device.</li><li>Now Flipper can run
<a href="https://fbflipper.com/docs/extending/desktop-plugin-structure/#creating-a-client-plugin">&quot;client&quot; plugins</a>.</li><li>Client plugins talk to the device application over the WebSocket bridge - the
connection from Flipper UI to Flipper WebSocket server piped to the
connection from the device application to the Flipper WebSocket server.</li></ol><blockquote><p>You can start Flipper Electron with <code>yarn flipper-server</code> from the <code>/desktop</code>
folder.</p></blockquote><h2>How it affects plugins</h2><p>Plugins are hosted by Flipper UI. When it was a part of the Electron app, there
was no problem. Plugins could access any Node.js APIs thanks to Electron magic.
There were no constraints on what plugins could do. After making Flipper UI a
proper web app running in a browser, we limited what plugins can do. They no
longer can access the network stack or the file system because there are no
corresponding browser APIs. Yet, we want to keep Flipper flexible and provide as
much freedom to plugin developers as possible. Moreover, we could not leave the
existing plugins without a clear migration path.</p><p><img src="/img/flipper-node-apis.jpg" alt="Flipper remote Node.js API"/></p><p>Since we already have a WebSocket connection between Flipper UI and Flipper
Server, we can model almost any request-response and even stream-based Node.js
APIs over it. So far, we exposed a curated subset of them:</p><ul><li>child_process<ul><li>exec</li></ul></li><li>fs (and <a href="https://www.npmjs.com/package/fs-extra">fs-extra</a>)<ul><li>constants</li><li>access</li><li>pathExists</li><li>unlink</li><li>mkdir</li><li>rm</li><li>copyFile</li><li>stat</li><li>readlink</li><li>readFile</li><li>writeFile</li></ul></li></ul><p>We also provided a way to
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L83">download a file</a>
or send requests to the
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L186">internal infrastructure</a>.</p><blockquote><p>Please, find the complete list of available APIs on
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L95">GitHub</a>.
<a href="https://github.com/facebook/flipper/blob/0f038218f893d86e91714cd91eed8e37d756386c/desktop/flipper-plugin/src/plugin/FlipperLib.tsx#L47">Here are Node.js API abstractions</a>
specifically.</p></blockquote><p>As you might have noticed, all exposed APIs are of the request-response nature.
They assume a short finite controlled lifespan. Yet, some plugins start
additional web servers or spawn long-living child processes. To control their
lifetime we need to track them on Flipper Server side and stop them whenever
Flipper UI disconnects. Say hello to a new experimental feature - Flipper Server
Add-ons!</p><p><img src="/img/flipper-add-on.jpg" alt="Flipper Server Add-on"/></p><p>Now, every flipper plugin could have &quot;server add-on&quot; meta-information. Whenever
a Flipper plugin that has a corresponding Server Add-on starts, it sends a
command to Flipper Server to start its Server Add-on counterpart. Flipper plugin
that lives in a browser inside of Flipper UI talks to its server add-on over the
WebSocket connection. Whenever a user disables a plugin, Flipper sends a command
to Flipper Server to stop the add-on. At the same time, if Flipper UI crashes or
the user just closes the tab, Flipper Server can kill the server add-on on its
own.</p><p>Flipper plugin can talk to its server add-on companion (see
<code>onServerAddOnMessage</code>, <code>onServerAddOnUnhandledMessage</code>, <code>sendToServerAddOn</code> in
<a href="https://fbflipper.com/docs/extending/flipper-plugin/#pluginclient">the docs</a>)
and act whenever it starts or stops (see <code>onServerAddOnStart</code>,
<code>onServerAddOnStop</code> in
<a href="https://fbflipper.com/docs/extending/flipper-plugin/#pluginclient">the docs</a>).</p><p>Say, you wrote an ultimate library to find primes. You were cautious of the
resource consumption, so you did it in Rust. You created a CLI interface for
your new shiny library. Now, you want your Flipper plugin to use it. It takes a
long time to find a prime and you want to keep track of the progress. You could
use <code>getFlipperLib().remoteServerContext.childProcess.exec</code>, but it is not
flexible enough to monitor progress updates that your CLI sends to stdout. Here
is how you could approach it:</p><pre><code class="language-tsx">// contract.tsx
export interface ServerAddOnEvents {
  // Server add-on sends &quot;progress&quot; events with the progress updates
  progress: number;
}
export interface ServerAddOnMethods {
  // Client plugin send &quot;findPrime&quot; messages to the server add-on to start finding primes
  findPrime: () =&gt; Promise&lt;number&gt;;
}

// index.tsx (your plugin)
import {usePlugin, useValue, createState, PluginClient} from &#x27;flipper-plugin&#x27;;
import {ServerAddOnEvents, ServerAddOnMethods} from &#x27;./contract&#x27;;

export const plugin = (
  client: PluginClient&lt;{}, {}, ServerAddOnEvents, ServerAddOnMethods&gt;,
) =&gt; {
  const prime = createState&lt;number | null&gt;(null);
  const progress = createState&lt;number&gt;(0);

  client.onServerAddOnStart(async () =&gt; {
    const newPrime = await client.sendToServerAddOn(&#x27;findPrime&#x27;);
    prime.set(newPrime);
  });

  client.onServerAddOnStart(() =&gt; {
    client.onServerAddOnMessage(&#x27;progress&#x27;, progressUpdate =&gt; {
      progress.set(progressUpdate);
    });
  });

  return {
    prime,
    progress,
  };
};

export const Component = () =&gt; {
  const pluginInstance = usePlugin(plugin);
  const prime = useValue(pluginInstance.prime);
  const progress = useValue(pluginInstance.progress);

  return &lt;div&gt;{prime ?? `Calculating (${progress}%) done...`}&lt;/div&gt;;
};

// serverAddOn.tsx
import {ServerAddOn} from &#x27;flipper-plugin&#x27;;
import {exec, ChildProcess} from &#x27;child_process&#x27;;
import {ServerAddOnEvents, ServerAddOnMethods} from &#x27;./contract&#x27;;

const serverAddOn: ServerAddOn&lt;ServerAddOnEvents, ServerAddOnMethods&gt; =
  async connection =&gt; {
    let findPrimeChildProcess: ChildProcess | undefined;

    connection.receive(&#x27;findPrime&#x27;, () =&gt; {
      if (findPrimeChildProcess) {
        // Allow only one findPrime request at a time. Finding primes is expensive!
        throw new Error(&#x27;Too many requests!&#x27;);
      }

      // Start our awesome Rust lib
      findPrimeChildProcess = exec(&#x27;/find-prime-cli&#x27;, {shell: true});

      // Return a Promise that resolves when a prime is found.
      // Flipper will serialize the value the promise is resolved with and send it oer the wire.
      return new Promise(resolve =&gt; {
        // Listen to stdout of the lib for the progress updates and, eventually, the prime
        findPrimeChildProcess.stdout.on(&#x27;data&#x27;, data =&gt; {
          // Say, data is a stringified JSON
          const parsed = JSON.parse(data);

          if (parsed.type === &#x27;progress&#x27;) {
            connection.send(&#x27;progress&#x27;, parsed.value);
            return;
          }

          // Allow new requests to find new primes
          findPrimeChildProcess = undefined;
          // If it is not a progress update, then a prime is found.
          resolve(parsed.value);
        });
      });
    });
  };

export default serverAddOn;
</code></pre><h2>Migration guide</h2><ol><li><p>Examine your plugins for Node.js APIs. Replace them with
<code>getFlipperLib().remoteServerContext.*</code> calls.</p><pre><code class="language-tsx">// before
import {mkdir} from &#x27;fs/promises&#x27;;

export const plugin = () =&gt; {
  const myAwesomeFn = async () =&gt; {
    await mkdir(&#x27;/universe/dagobah&#x27;);
  };

  return {
    myAwesomeFn,
  };
};

// after
import {getFlipperLib} from &#x27;flipper-plugin&#x27;;

export const plugin = () =&gt; {
  const myAwesomeFn = async () =&gt; {
    await getFlipperLib().remoteServerContext.mkdir(&#x27;/universe/dagobah&#x27;);
  };

  return {
    myAwesomeFn,
  };
};
</code></pre></li><li><p>If your plugin uses network stack of spawns a subprocess, consider creating a
Server Add-on.</p><ol><li><p>In your plugin&#x27;s folder create a new file - <code>serverAddOn.tsx</code></p></li><li><p>In your plugin&#x27;s package.json add fields <code>serverAddOn</code> and
<code>flipperBundlerEntryServerAddOn</code></p><pre><code class="language-js">{
   // ...
   &quot;serverAddOn&quot;: &quot;dist/serverAddOn.js&quot;,
   &quot;flipperBundlerEntryServerAddOn&quot;: &quot;serverAddOn.tsx&quot;,
   // ...
}
</code></pre></li><li><p>Move your Node.js API calls to <code>serverAddOn.tsx</code></p></li></ol></li><li><p>Verify your plugin works in a browser environment.</p><ol><li>Clone <a href="https://github.com/facebook/flipper">Flipper repo</a>.</li><li>Navigate to the <code>desktop</code> folder.</li><li>In your terminal run <code>yarn</code>.</li><li>Run <code>yarn flipper-server</code>.</li><li>Load your plugin and make sure it works.</li></ol></li></ol><h2>P.S. Flipper needs you!</h2><p>Flipper is maintained by a small team at Meta, yet is serving over a hundred
plugins and dozens of different targets. Our team&#x27;s goal is to support Flipper
as a plugin-based platform for which we maintain the infrastructure. We don&#x27;t
typically invest in individual plugins, but we do love plugin improvements.</p><p>For that reason, we&#x27;ve marked many requests in the issue tracker as
<a href="https://github.com/facebook/flipper/issues?q=is%3Aissue+is%3Aopen+label%3A%22PR+welcome%22">PR Welcome</a>.
Contributing changes should be as simple as cloning the
<a href="https://github.com/facebook/flipper">repository</a> and running
<code>yarn &amp;&amp; yarn start</code> in the <code>desktop/</code> folder.</p><p>Investing in debugging tools, both generic ones or just for specific apps, will
benefit iteration speed. And we hope Flipper will make it as hassle free as
possible to create your debugging tools. For an overview of Flipper for React
Native, and why and how to build your own plugins, we recommend checking out the
<a href="https://youtu.be/WltZTn3ODW4">Flipper: The Extensible DevTool Platform for React Native</a>
talk.</p><p>Happy debugging!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Flipper is coming to your web and Node.js apps]]></title>
            <link>https://fbflipper.com/blog/2022/02/21/js-flipper-announcement</link>
            <guid>Flipper is coming to your web and Node.js apps</guid>
            <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Flipper now provides an official JavaScript client. We will see what `js-flipper` is, go over Flipper communication protocol, talk about what it takes to build a new Flipper client.]]></description>
            <content:encoded><![CDATA[<p><img src="/img/js-flipper.jpg" alt="Cover image"/></p><p>For quite some time already, Flipper has secretly provided an experimental
JavaScript SDK to support connections from browsers and Node.js under the name
of <code>flipper-js-client-sdk</code>. With the ongoing migration of all our clients to
WebSockets, we have committed to providing an official documented SDK for
JavaScript clients. Without further ado, welcome
<a href="https://www.npmjs.com/package/js-flipper">js-flipper</a>!</p><p>In this post we will:</p><ul><li>See what <code>js-flipper</code> is</li><li>Get acquainted with how to build a Flipper plugin for a React app</li><li>Learn how Flipper talks to a mobile device</li><li>Dive deeper into the message structure</li><li>Glance at what it takes to support a new platform</li></ul><h2>What <code>js-flipper</code> is and why it matters</h2><p>Flipper supports native iOS, native Android apps and React Native apps out of
the box. Now with <code>js-flipper</code>, Flipper also supports JavaScript apps. Any
JavaScript app, whether they run in your browser or on your Node.js server, can
now connect to Flipper for a debugging session.</p><p><code>js-flipper</code> is a new NPM package that exposes a Flipper client to your
JavaScript apps. Any Flipper client, in its turn, is a set of abstractions that
let your device connect and talk to Flipper. Long story short, <code>js-flipper</code>
allows you to easily write Flipper plugins for your web and Node.js apps.</p><blockquote><p><a href="https://fbflipper.com/docs/tutorial/javascript/">Here</a> is how you can write
your first simple plugin.</p></blockquote><p>Why does it matter?</p><p>It&#x27;s a huge deal for two reasons:</p><ol><li>Flipper at its core is just a device discovery service with a message bus.
Its power comes from the plugins and the ecosystem.</li><li>It brings us one step closer to our goal of running Flipper everywhere. Bring
Flipper to your microwave! On a serious note, more platforms -&gt; bigger
community -&gt; more developers -&gt; more plugins -&gt; better Flipper for everyone.</li></ol><p>Let&#x27;s take a quick look at the principal architecture of Flipper:</p><p><img src="/img/flipper-arch.svg" alt="Flipper architecture"/></p><p>Here is what happens there:</p><ol><li>Flipper constantly polls
<a href="https://developer.android.com/studio/command-line/adb">ADB</a> for available
Android devices and <a href="https://fbidb.io/">IDB</a> for available iOS devices.</li><li>If the device is running an app with an enabled Flipper client, the client
tries to connect to Flipper on your laptop. It lets Flipper know that there
is an app that it can talk to. Flipper and app chit-chat a bit negotiating
the security and the list of supported plugins.</li><li>The developer picks one of the connected apps / devices. Say, it&#x27;s the app.</li><li>The developer clicks one of the available plugins.</li><li>The plugin starts talking to the app on the device via the message bus
exposed by Flipper. The plugin asks for necessary data from the app and shows
it in a pretty UI.</li></ol><p>At Meta, we have many active plugins, across a wide variety of devices, not just
phones, but also Quests, desktop applications, etc. At its core, Flipper is
data-agnostic and connect data flows to plugin displays. All Flipper core (we
call it Flipper Server) knows is what devices and Flipper-enabled apps are out
there. I hope it gets us on the same page regarding why plugins (and plugin
developers!) are crucial for Flipper.</p><p>Another important conclusion you could draw from the diagram is that the state
of Flipper plugins is ephemeral and lives in the UI.</p><h2>How Flipper talks to a mobile device</h2><p>Let&#x27;s dive a bit deeper into how exactly the device and Flipper talk. Flipper
pulls device logs from ADB/IDB. For everything else, Flipper expects the app
(Flipper client inside of the app) to open a WebSocket connection to Flipper.</p><p>The algorithm looks like this:</p><ol><li>The app opens a WebSocket connection to Flipper.</li><li>They exchange certificates. Flipper connects to the app using ADB/IDB and
writes a certificate to the app storage.</li><li>The app opens a secure WebSocket connection to Flipper using the certificate.</li></ol><p>Why do we even bother with the certificate exchange process? One of the
potential attack vectors is that a developer could install a malicious app on
the testing device. That app could spin up a WebSocket server and mask itself as
Flipper. However, unlike Flipper, the malicious app can&#x27;t access the file
storage of another app. As a result, it can&#x27;t complete the certificate exchange
process.</p><p>On mobile devices certificate exchange is important, so that other apps on the
phone can&#x27;t impersonate Flipper. For browser apps this isn&#x27;t an issue as the
browser already makes sure a malicious page cannot act as Flipper server. For
platforms like this, we use a simplified connection algorithm:</p><ol><li>The app opens a WebSocket connection to Flipper.</li><li>Bingo!</li></ol><p><code>js-flipper</code> implements the second algorithm, without the certificate exchange.</p><h2>Message protocol and structure</h2><p>Once the final WebSocket connection is established, Flipper starts talking to
the app:</p><ol><li>It sends <code>getPlugins</code> and <code>getBackgroundPlugins</code> messages to get a list of
plugins supported by the app.</li><li>Flipper displays the available plugins to the developer.</li><li>Developer clicks on one of the plugins (enables a plugin).</li><li>Flipper loads the UI for the plugin. Let&#x27;s settle on calling the part of the
plugin &quot;desktop plugin&quot; and the device part of the plugin &quot;client plugin&quot;.</li><li>Flipper sends <code>init</code> message to the app.</li><li>Client plugin <code>onConnect</code> code is executed. Read more about Client Plugin API
<a href="https://fbflipper.com/docs/extending/create-plugin/">here</a>.</li><li>Whenever a &quot;desktop plugin&quot; needs some data from the device it sends an
<code>execute</code> message to the &quot;client plugin&quot; on the device.</li><li>&quot;Client plugin&quot; replies with the data.</li><li>&quot;Client plugin&quot; might force the &quot;desktop plugin&quot; to do something as well by
sending an <code>execute</code> message as well. However, it is rare. In the current
implementation, the &quot;client plugin&quot; can never expect a reply back from the
&quot;desktop plugin&quot;. In other words, consider it as an event sink, not as a way
to extract some data from the &quot;desktop plugin&quot;.</li><li>When the plugin is deactivated a <code>deinit</code> message is sent to the &quot;client
plugin&quot;.</li><li>Client plugin <code>onDisconnect</code> code is executed.</li></ol><blockquote><p>The process above is for the insecure WebSocket connections we currently use
in <code>js-flipper</code>. It is more complicated for secure WebSocket connections that
require certificate exchange.</p></blockquote><p>Flipper expects each message to have the following structure:</p><pre><code class="language-ts">export interface FlipperRequest {
  method: string; // &#x27;getPlugins&#x27; | &#x27;getBackgroundPlugins&#x27; | &#x27;init&#x27; | &#x27;deinit&#x27; | &#x27;execute&#x27; | &#x27;isMethodSupported&#x27;
  params?: {
    api: string; // Plugin ID (name)
    // These nested `method` and `params` could be anything.
    // You set them yourself as you see fit to support the data exchange between the &quot;desktop plugin&quot; and the &quot;client plugin&quot;.
    // For example, for &#x27;ReactNativeTicTacToe&#x27; we support 2 methods: &#x27;SetState&#x27; and &#x27;GetState&#x27;.
    // We pass a game state with a &#x27;SetState&#x27; message. See https://fbflipper.com/docs/tutorial/javascript/#step-3-call-addplugin-to-add-your-plugin
    method: string;
    params?: unknown;
  };
}
</code></pre><p>The only exception is the response message the &quot;client plugin&quot; sends back when
the data is requested.</p><pre><code class="language-ts">export type FlipperResponse = {
  id: number;
  success?: object | string | number | boolean | null;
  error?: {
    message: string;
    stacktrace?: string;
    name?: string;
  };
};
</code></pre><h2>Building a new client</h2><p>At this point, you know what messages your client needs to support in a Flipper
client:</p><ul><li><code>getPlugins</code></li><li><code>getBackgroundPlugins</code></li><li><code>init</code></li><li><code>deinit</code></li><li><code>execute</code></li></ul><p>One other message we did not mention before is <code>isMethodSupported</code>. Its job is
to reply back to a &quot;desktop plugin&quot; whether a &quot;client plugin&quot; supports one of
plugin messages (that nested <code>method</code> field). It&#x27;s useful when you have a single
&quot;desktop plugin&quot; implementation, but different &quot;client plugin&quot; implementations.
For example, some operations might not be supported on iOS, but are supported on
Android. Alternatively, it can address version differences between the plugin
installed on the device and the one loaded into Flipper.</p><p>If you want to build a proper Flipper client, you also need to provide an
abstraction for plugin developers. Consider matching
<a href="https://fbflipper.com/docs/extending/create-plugin/#flipperplugin">what we have for existing clients</a>.</p><p>Most of the groundwork for handling connections and doing certificate exchange
is already done in our
<a href="https://github.com/facebook/flipper/tree/main/xplat">C++ engine</a>. Our iOS,
Android, React Native clients use it under the hood. <code>js-flipper</code> implements
everything from scratch using native browser APIs (for Node.js apps we
<a href="https://github.com/facebook/flipper/tree/main/js/js-flipper#nodejs">require developers to provide a WebSocket implementation</a>).</p><p>Here is a detailed document on how to
<a href="https://fbflipper.com/docs/extending/new-clients/">implement a client</a>. You
might also want to check the source code of our existing clients:</p><ul><li><a href="https://github.com/facebook/flipper/tree/main/iOS/FlipperKit">iOS</a></li><li><a href="https://github.com/facebook/flipper/tree/main/android/src/main">Android</a></li><li><a href="https://github.com/facebook/flipper/tree/main/react-native/react-native-flipper">React Native</a></li><li><a href="https://github.com/facebook/flipper/tree/main/js/js-flipper">JavaScript</a></li></ul><h2>What&#x27;s next?</h2><p>As of now, we do not provide any default plugins you might be used to for
<code>js-flipper</code> (Layout, Logs, Navigation, Crash Reporter, and others). We hope
this will change in the future with the help of ur beloved open-source
community!</p><p><em>Call to action!</em></p><p>We would like to encourage you to play with <code>js-flipper</code>. See how it fits your
use-case and get back back to us with your feedback on
<a href="https://github.com/facebook/flipper/issues">GitHub</a>. If you find yourself
implementing one of your favorite Flipper plugins for <code>js-flipper</code>, do not
hesitate and raise a PR!</p><p>Plugins can be either generic or very application specific. Plugins can interact
with Redux or MobX stores, read performance data or console logs from the
browser. At Meta, we also see a lot of plugins that are very application
specific. For example, plugins that allow logging in as specific test users with
a single click, reading the internal state of NewsFeed and interacting with it,
simulating photos captured by a smartphone, etc. A Flipper plugin can be any
form of UI that is useful to speed up debugging and tasks on things you work on
frequently!</p><h2>P.S. Flipper needs you!</h2><p>Flipper is maintained by a small team at Meta, yet is serving over a hundred
plugins and dozens of different targets. Our team&#x27;s goal is to support Flipper
as a plugin-based platform for which we maintain the infrastructure. We don&#x27;t
typically invest in individual plugins, but we do love plugin improvements. For
example, the support for mocking network requests (on Android) was entirely
contributed by the community (thanks
<a href="https://github.com/bizzguy">James Harmon</a>!). As was Protobuf support (thanks
<a href="https://github.com/hbmartin">Harold Martin</a>!).</p><p>For that reason, we&#x27;ve marked many requests in the issue tracker as
<a href="https://github.com/facebook/flipper/issues?q=is%3Aissue+is%3Aopen+label%3A%22PR+welcome%22">PR Welcome</a>.
Contributing changes should be as simple as cloning the
<a href="https://github.com/facebook/flipper">repository</a> and running
<code>yarn &amp;&amp; yarn start</code> in the <code>desktop/</code> folder.</p><p>Investing in debugging tools, both generic ones or just for specific apps, will
benefit iteration speed. And we hope Flipper will make it as hassle free as
possible to create your debugging tools. For an overview of Flipper for React
Native, and why and how to build your own plugins, we recommend checking out the
<a href="https://youtu.be/WltZTn3ODW4">Flipper: The Extensible DevTool Platform for React Native</a>
talk.</p><p>Happy debugging!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Flipper 2021 Roadmap Update]]></title>
            <link>https://fbflipper.com/blog/2021/10/14/roadmap</link>
            <guid>Flipper 2021 Roadmap Update</guid>
            <pubDate>Thu, 14 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[What is next for Flipper?]]></description>
            <content:encoded><![CDATA[<p>Over the last year, the Flipper adoption in the open source community has doubled, and for many React Native developers Flipper has become the default debugging tool.
As the community continues to grow, we believe it’s important to share updates about our plans. </p><h2>A short look back</h2><p>During the first half of 2021, we have introduced support for connecting to physical iOS devices by leveraging <a href="https://fbidb.io/">idb</a>.
We have also introduced the <a href="https://fbflipper.com/docs/extending/sandy-migration">Sandy plugin architecture</a>, which simplifies the creation of plugins and provides a richer set of UI components by adopting <a href="https://ant.design/components/overview/">Ant Design</a>.
The new architecture is strongly typed, easily unit testable and allows us to <a href="https://youtu.be/WCs09c1B1Lk">process and render data much faster</a>, which has (at Facebook at least) significantly increased the up-time of Flipper.
The underlying mechanism has been open sourced as the <a href="https://www.npmjs.com/package/flipper-data-source"><code>flipper-data-source</code></a> package.
And last but not least, we introduced dark mode support.</p><h2>What is ahead?</h2><p>Our focus for Flipper for Q4 2021 is to remove friction and make it easier to onboard new targets.
This is because, in many instances, Flipper isn&#x27;t used just to debug mobile apps, but also to debug many of our other products, such as native and Electron-based desktop applications, and devices like Oculus, Portal or feature phones.</p><p>Looking ahead, we plan to:</p><ul><li><strong>Move away from RSocket</strong>. RSocket is a protocol that served us well for encrypted communication between Flipper and clients. However, especially in the React Native world, the dependencies it brings has been a continuous source of build issues with any new iOS update. We are now testing internally a version of Flipper that uses secured WebSocket connections instead. The resulting simplified dependency chain should prevent a lot of current and future build issues.</li><li><strong>Introduce a headless Flipper version</strong>. The Flipper team is currently investing in decoupling all network, OS and device interaction logic from the Flipper front end. This will make it possible to run Flipper as a headless service, and embed the UI in any web-based stack. By default Flipper will remain an Electron app, but this change introduces a lot of new possibilities: It will be possible to run Flipper headless on CI systems to collect data during test runs. It will be possible to embed the Flipper UI inside IDEs to reduce context switching. To achieve this, the Flipper code base will be split into many smaller packages.</li><li><strong>Improve the Flipper marketplace</strong>. We are working on an improved Flipper plugin marketplace, to help promote plugins, and create a better understanding of what plugins do, and how they are supported.</li><li><strong>Create a reference WebSocket implementation</strong>. For Native mobile apps and React Native, there are standard packages to register plugins and connect to the Flipper desktop application. Although several WebSocket implementations exist to do the same for web apps, we don&#x27;t have a standardized SDK and example project for integrating web applications with Flipper. By changing this we&#x27;ll hope to make it easy for front-end engineers to leverage Flipper.</li><li><strong>Add support for React Native Windows</strong>. &#x27;nough said.</li></ul><h2>Flipper needs you!</h2><p>Flipper is maintained by a small team at Facebook, yet serving over a hundred plugins and dozens of different targets. Our team&#x27;s goal is to support Flipper as a plugin-based platform for which we maintain the infrastructure.
We don&#x27;t typically invest in individual plugins, but we do love plugin improvements. For example, the support for mocking network requests (on Android) was entirely contributed by the community (thanks <a href="https://github.com/bizzguy">James Harmon</a>!). As was Protobuf support (thanks <a href="https://github.com/hbmartin">Harold Martin</a>!).</p><p>For that reason, we&#x27;ve marked many requests in the issue tracker as <a href="https://github.com/facebook/flipper/issues?q=is%3Aissue+is%3Aopen+label%3A%22PR+welcome%22">PR Welcome</a>.
Contributing changes should be as simple as cloning the <a href="https://github.com/facebook/flipper">repository</a> and running <code>yarn &amp;&amp; yarn start</code> in the <code>desktop/</code> folder.</p><p>Investing in debugging tools, both generic ones or just for specific apps, will benefit iteration speed.
And we hope Flipper will make it as hassle free as possible to create your debugging tools.
For an overview of Flipper for React Native, and why and how to build your own plugins, we recommend checking out the <a href="https://youtu.be/WltZTn3ODW4">Flipper: The Extensible DevTool Platform for React Native</a> talk.</p><p>Happy debugging!</p>]]></content:encoded>
        </item>
    </channel>
</rss>