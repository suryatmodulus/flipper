"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9977],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>u,MDXProvider:()=>s,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>d});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},l.apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),d=function(e){return function(n){var t=p(n.components);return r.createElement(e,l({},n,{components:t}))}},p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(t),s=i,m=d["".concat(a,".").concat(s)]||d[s]||g[s]||l;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var u=2;u<l;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},13919:(e,n,t)=>{function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!r(e)}t.d(n,{b:()=>r,Z:()=>i})},44996:(e,n,t)=>{t.r(n),t.d(n,{useBaseUrlUtils:()=>l,default:()=>a});var r=t(52263),i=t(13919);function l(){var e=(0,r.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,t=void 0===n?"/":n,l=e.url;return{withBaseUrl:function(e,n){return function(e,n,t,r){var l=void 0===r?{}:r,a=l.forcePrependBaseUrl,o=void 0!==a&&a,c=l.absolute,u=void 0!==c&&c;if(!t)return t;if(t.startsWith("#"))return t;if((0,i.b)(t))return t;if(o)return n+t;var d=t.startsWith(n)?t:n+t.replace(/^\//,"");return u?e+d:d}(l,t,e,n)}}}function a(e,n){return void 0===n&&(n={}),(0,l().withBaseUrl)(e,n)}},72069:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>c,contentTitle:()=>u,metadata:()=>d,toc:()=>p,default:()=>g});var r=t(83117),i=t(80102),l=(t(67294),t(3905)),a=t(44996),o=["components"],c={id:"client-plugin-lifecycle",title:"Client Plugin Lifecycle"},u=void 0,d={unversionedId:"extending/client-plugin-lifecycle",id:"extending/client-plugin-lifecycle",isDocsHomePage:!1,title:"Client Plugin Lifecycle",description:"There are two types of client plugin: Regular and Background. It's recommended you start off with a regular plugin and switch to a background plugin if necessary.",source:"@site/../docs/extending/client-plugin-lifecycle.mdx",sourceDirName:"extending",slug:"/extending/client-plugin-lifecycle",permalink:"/docs/extending/client-plugin-lifecycle",editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/client-plugin-lifecycle.mdx",tags:[],version:"current",frontMatter:{id:"client-plugin-lifecycle",title:"Client Plugin Lifecycle"},sidebar:"extending",previous:{title:"Architecture",permalink:"/docs/extending/arch"},next:{title:"Extending the Layout Inspector",permalink:"/docs/extending/layout-inspector"}},p=[{value:"Regular plugin Lifecycle",id:"regular-plugin-lifecycle",children:[],level:2},{value:"Background Plugin Lifecycle",id:"background-plugin-lifecycle",children:[],level:2}],s={toc:p};function g(e){var n=e.components,t=(0,i.Z)(e,o);return(0,l.mdx)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"There are two types of client plugin: ",(0,l.mdx)("a",{parentName:"p",href:"#regular-plugin-lifecycle"},"Regular")," and ",(0,l.mdx)("a",{parentName:"p",href:"#background-plugin-lifecycle"},"Background"),". It's recommended you start off with a regular plugin and switch to a background plugin if necessary."),(0,l.mdx)("p",null,"For both types of plugin, it's recommended you start work after the ",(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," is called then terminate work after ",(0,l.mdx)("inlineCode",{parentName:"p"},"onDisconnect"),", when possible. This prevents wasted computation when Flipper isn't connected. If the plugin needs to keep track of events that occur before it gets connected (such as initial network requests on app startup), you should do so in the plugin constructor (or ideally in a separate class)."),(0,l.mdx)("h2",{id:"regular-plugin-lifecycle"},"Regular plugin Lifecycle"),(0,l.mdx)("p",null,"For regular plugins, ",(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"onDisconnect")," are triggered when the user opens the plugin in the Flipper UI, and when they switch to another plugin, respectively.\nThe process is illustrated in the following diagram."),(0,l.mdx)("img",{alt:"Regular Plugin Lifecycle diagram",src:(0,a.default)("img/regular-plugin-lifecycle.png")}),(0,l.mdx)("h2",{id:"background-plugin-lifecycle"},"Background Plugin Lifecycle"),(0,l.mdx)("p",null,"For background plugins, ",(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," is called when Flipper first connects, and ",(0,l.mdx)("inlineCode",{parentName:"p"},"onDisconnect")," when it disconnects. The user does not need to be viewing the plugin for it to send messages; they will be queued up until the next time the user opens the plugin where they will be processed."),(0,l.mdx)("p",null,"Even for background plugins, ",(0,l.mdx)("inlineCode",{parentName:"p"},"onDisconnect")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," may be called on a plugin (such as if the user restarts Flipper). Plugins should handle this accordingly by making sure to resend any important data to the reconnected instance. The process is illustrated in the following diagram."),(0,l.mdx)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"Note that a plugin must be enabled by the user for its messages to be queued up."))),(0,l.mdx)("img",{alt:"Background Plugin Lifecycle diagram",src:(0,a.default)("img/bg-plugin-lifecycle.png")}))}g.isMDXComponent=!0}}]);