"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5319],{3905:(e,n,i)=>{i.r(n),i.d(n,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>v,useMDXComponents:()=>p,withMDXComponents:()=>l});var t=i(67294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var i=arguments[n];for(var t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t])}return e},o.apply(this,arguments)}function s(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?s(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function c(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var d=t.createContext({}),l=function(e){return function(n){var i=p(n.components);return t.createElement(e,o({},n,{components:i}))}},p=function(e){var n=t.useContext(d),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},u=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(i),u=r,m=l["".concat(s,".").concat(u)]||l[u]||f[u]||o;return i?t.createElement(m,a(a({ref:n},d),{},{components:i})):t.createElement(m,a({ref:n},d))}));function v(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,s=new Array(o);s[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var d=2;d<o;d++)s[d]=i[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,i)}m.displayName="MDXCreateElement"},13919:(e,n,i)=>{function t(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!t(e)}i.d(n,{b:()=>t,Z:()=>r})},44996:(e,n,i)=>{i.r(n),i.d(n,{useBaseUrlUtils:()=>o,default:()=>s});var t=i(52263),r=i(13919);function o(){var e=(0,t.default)().siteConfig,n=(e=void 0===e?{}:e).baseUrl,i=void 0===n?"/":n,o=e.url;return{withBaseUrl:function(e,n){return function(e,n,i,t){var o=void 0===t?{}:t,s=o.forcePrependBaseUrl,a=void 0!==s&&s,c=o.absolute,d=void 0!==c&&c;if(!i)return i;if(i.startsWith("#"))return i;if((0,r.b)(i))return i;if(a)return n+i;var l=i.startsWith(n)?i:n+i.replace(/^\//,"");return d?e+l:l}(o,i,e,n)}}}function s(e,n){return void 0===n&&(n={}),(0,o().withBaseUrl)(e,n)}},13812:(e,n,i)=>{i.r(n),i.d(n,{frontMatter:()=>a,contentTitle:()=>c,metadata:()=>d,toc:()=>l,default:()=>u});var t=i(83117),r=i(80102),o=(i(67294),i(3905)),s=(i(44996),["components"]),a={id:"device-identifiers",title:"Device Identifiers",sidebar_label:"Device Identifiers"},c=void 0,d={unversionedId:"internals/device-identifiers",id:"internals/device-identifiers",isDocsHomePage:!1,title:"Device Identifiers",description:"Flipper is capable of discovering and listing available devices for multiple platforms. It enables users to check for connected devices and quickly access a number of plugins:",source:"@site/../docs/internals/device-identifiers.mdx",sourceDirName:"internals",slug:"/internals/device-identifiers",permalink:"/docs/internals/device-identifiers",editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/internals/device-identifiers.mdx",tags:[],version:"current",frontMatter:{id:"device-identifiers",title:"Device Identifiers",sidebar_label:"Device Identifiers"},sidebar:"internals",previous:{title:"Linters",permalink:"/docs/internals/linters"}},l=[{value:"How does Flipper map connecting apps to their respective devices?",id:"how-does-flipper-map-connecting-apps-to-their-respective-devices",children:[{value:"Obtaining the device identifier",id:"obtaining-the-device-identifier",children:[],level:3}],level:2}],p={toc:l};function u(e){var n=e.components,a=(0,r.Z)(e,s);return(0,o.mdx)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Flipper is capable of discovering and listing available devices for multiple platforms. It enables users to check for connected devices and quickly access a number of plugins:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Logs"),(0,o.mdx)("li",{parentName:"ul"},"Mobile Builds"),(0,o.mdx)("li",{parentName:"ul"},"Crash Reporter")),(0,o.mdx)("p",null,"Device information, including identifiers, is obtained using either ",(0,o.mdx)("inlineCode",{parentName:"p"},"idb list-targets --json")," on iOS or ",(0,o.mdx)("inlineCode",{parentName:"p"},"adb devices")," on Android."),(0,o.mdx)("p",null,"On Flipper Desktop, apps are shown alongside the device it's running on."),(0,o.mdx)("p",null,"Unfortunately, on the client side, obtaining the device identifier is a problem."),(0,o.mdx)("h2",{id:"how-does-flipper-map-connecting-apps-to-their-respective-devices"},"How does Flipper map connecting apps to their respective devices?"),(0,o.mdx)("p",null,"Over the years, for security reasons, both Apple and Google have locked down their APIs so that apps can't find any value that could be considered unique such as a MAC address or serial numbers. This means there's no OS API available."),(0,o.mdx)("p",null,"To obtain this device identifier, a two-way approached had to be used."),(0,o.mdx)("h3",{id:"obtaining-the-device-identifier"},"Obtaining the device identifier"),(0,o.mdx)("p",null,"From the Flipper Desktop side, connected devices are discovered and listed using idb or adb as mentioned above, by which it sees some TCP connections coming in from apps.\nIt is during the certificate exchange process that we do the mapping from apps to device."),(0,o.mdx)("p",null,"In this process, an app creates and sends a Certificate Signing Request (CSR) to Flipper Desktop alongside some other data including the path in the application sandbox where this CSR was originally written."),(0,o.mdx)("p",null,"When Flipper Desktop is processing the request, it effectively lists all possible connected devices and proceeds to try and pull the CSR from each device. The CSR is then compared with the one sent by the client. If there's a match, we have successfully made the pairing and the device identifier is sent back to the client."),(0,o.mdx)("p",null,"The client receives the device identifier and uses this information for subsequent secure TCP connections."),(0,o.mdx)("p",null,"When a secure TCP connection is established, the device identifier is passed along and thus Flipper is able to map the connecting app to its running device."),(0,o.mdx)("p",null,"The following diagram depicts this process."),(0,o.mdx)("p",null,(0,o.mdx)("img",{alt:"Device Identifier Sequence",src:i(84065).Z})))}u.isMDXComponent=!0},84065:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/sequence_device_id-a35e8f147d8a1b127458815d08e41e3e.png"}}]);